<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tomas Moya Pavlatka</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Tomas Moya Pavlatka</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>tomas@pavlatka.cz (Tomas Moya Pavlatka)</managingEditor>
    <webMaster>tomas@pavlatka.cz (Tomas Moya Pavlatka)</webMaster>
    <lastBuildDate>Wed, 19 Feb 2025 09:24:46 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rql&#43;Nestjs&#43;Prisma: Search Made Easy</title>
      <link>http://localhost:1313/posts/2025/rql-nestjs-prisma-search-easy/</link>
      <pubDate>Wed, 19 Feb 2025 09:24:46 +0100</pubDate><author>tomas@pavlatka.cz (Tomas Moya Pavlatka)</author>
      <guid>http://localhost:1313/posts/2025/rql-nestjs-prisma-search-easy/</guid>
      <description>&lt;p&gt;When you build API, you will always come to the state, where you will have to search among data which exists within your system. There are already standards how to deal with GET query parameters, such as&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/draft-nottingham-atompub-fiql-00&#34;&gt;FIQL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dundalek.com/rql/draft-zyp-rql-00.html&#34;&gt;RQL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We chose RQL for our latest project, which is built upon &lt;a href=&#34;https://nestjs.com/&#34;&gt;NestJS&lt;/a&gt; framework and using &lt;a href=&#34;https://www.prisma.io/&#34;&gt;prisma&lt;/a&gt; ORM as database abstraction.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-resource-query-language-rql&#34;&gt;What is Resource Query Language (RQL)?&lt;/h2&gt;&#xA;&lt;p&gt;RQL (Resource Query Language) is a query language designed for filtering and manipulating data in RESTful APIs. It provides a way to perform complex queries using a URL-friendly syntax, allowing operations like filtering, sorting, pagination, and aggregation. RQL is commonly used in APIs to enable flexible and efficient data retrieval without requiring custom query parameters for each use case. Read more about &lt;a href=&#34;https://www.sitepen.com/blog/resource-query-language-a-query-language-for-the-web-nosql&#34;&gt;RQL&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
